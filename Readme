Food Delivery System
Background:
You are tasked with designing and implementing a food delivery system that consists of
several microservices. The system should allow customers to place orders, and the orders
should be fulfilled by various restaurants and delivery drivers.
Actors:
●​ Customer: A person who wants to order food from a restaurant
●​ Restaurant: A business that prepares and serves food
●​ Delivery Driver: A person who delivers food to the customer
●​ Customers can place orders for food from multiple restaurants
●​ Restaurants can receive and fulfill orders
●​ Delivery drivers can receive and deliver orders to customers
Scenario:
1.​ A customer opens the food delivery system user interface and searches for available
restaurants.
2.​ The system retrieves a list of restaurants and displays them to the customer. The
customer selects a restaurant and browses their menu.
3.​ The customer selects items from the menu and adds them to their order. The system
calculates the total cost of the order, including taxes, fees, and delivery charges.
4.​ The system creates an order record and sends it to the restaurant that will fulfill the
order.
5.​ The restaurant receives the order and begins preparing the food. The restaurant updates
the order status in the system to indicate that the food is being prepared.
6.​ Once the food is ready, the restaurant updates the order status in the system to indicate
that the food is ready for pickup or delivery.
7.​ The system sends a notification to all available delivery drivers to pick up the food and
deliver it to the customer.
8.​ The delivery driver receives the notification and proceeds to the restaurant to pick up the
food.
9.​ The delivery driver picks up the food and updates the order status in the system to
indicate that the food is in transit.
10.​The delivery driver delivers the food to the customer and updates the order status in the
system to indicate that the food has been delivered.
11.​The customer receives the food and confirms the delivery in the system.
12.​The system updates the order status to indicate that the order is complete and archived.
Alternate Scenario:
1.​ The customer may cancel the order.
2.​ Restaurant cancel the order
3.​ No Delivery Driver available (Refund)Requirements:
1.​ Design a microservices architecture for the food delivery system. Explain your design
choices, including DB(s), the services you will create, their responsibilities, and the
communication mechanisms between them.
2.​ Implement the microservices in Python. Use a framework that supports the
communication protocol. Use relevant databases. Make sure that each microservice can
run independently and that they communicate through APIs or message queues.
3.​ Use some authentication mechanisms so that only authenticated and authorized users
can access the services.
4.​ Create a mechanism for handling distributed transactions. Describe how you will ensure
that transactions across multiple microservices are consistent and that they can be rolled
back if necessary.
5.​ Start and deploy your services using docker and docker-compose.
6.​ Write a report that explains your design choices, the challenges you faced, and the
solutions you implemented. Include a description of the testing process and any issues
that arose. Describe how you ensured that the system is scalable, fault-tolerant and
reliable.
Reporting Module:
●​ Show total active customers, restaurants and riders.
●​ Provides a detailed history of all orders placed by each customer, including order dates,
and total cost. Users should be able to search by customer name, and reports should
support pagination.
●​ Show top 5 customers with the highest order frequency.
●​ Show the number of orders received and fulfilled by each restaurant during a specific
period. Users should be able to specify a period of its own choice.
●​ Show the breakdown of the total revenue generated by each restaurant.
●​ Lists the most ordered menu items across all restaurants, providing valuable insights for
optimizing restaurant menus.
●​ Summarize the distribution of order statuses (e.g., completed, in-progress, canceled).
●​ Show the number of deliveries completed by each rider.
●​ Show details of canceled orders and also show the total amount of canceled orders.
●​ Calculate the average order value across all customers, restaurants, or time periods.
●​ Display the peak times when the highest number of orders were placed, allowing the
user to define the desired time granularity. For example:
○​ If a day is selected, show the most popular time ranges during the day when
orders peaked.
○​ If a week is selected, highlight the days with the highest order volumes.
○​ If a month is selected, identify the weeks with the most orders.
○​ If a year is selected, present the months with the highest order counts. ​
Assessment:Your assignment will be assessed based on the following criteria:
●​ The quality of the system design, architectural choices and the choice of communication
mechanisms
●​ The effectiveness of the distributed transaction mechanism and the fault-tolerance of the
system
●​ The quality of the code, including the use of best practices, useability, maintainability,
and readability.